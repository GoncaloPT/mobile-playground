{"version":3,"sources":["components/header/header.js","components/login/login.js","App.js","serviceWorker.js","index.js"],"names":["Header","className","state","currentKeyValue","touchIdPluginExists","window","plugins","touchid","console","warn","alert","handleLoginClick","e","log","save","onLogin","err","isAvailable","has","keyName","verify","password","errorMessage","JSON","stringify","Login","id","type","name","value","onChange","newValue","target","disabled","placeholder","aria-label","aria-describedby","onClick","App","Boolean","location","hostname","match","renderReactDom","ReactDOM","render","document","getElementById","cordova","addEventListener","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"2QAUeA,MATf,WACI,OACI,yBAAKC,UAAU,iCACX,yBAAKA,UAAU,uDACX,0BAAMA,UAAU,MAAhB,kBCHVC,EAAS,CAAEC,gBAAiB,eAO5BC,EAAsB,WACxB,GAAIC,OAAOC,SAAWD,OAAOC,QAAQC,QACjC,OAAO,EAGPC,QAAQC,KAAK,uDACbC,MAAM,sBAQRC,EAAmB,SAACC,GAEtBJ,QAAQK,IAAI,mBAAqBX,EAAMC,iBACnCC,KACAC,OAAOC,QAAQC,QAAQO,KA1Bd,WA0B6BZ,EAAMC,iBAAiB,WACzDK,QAAQK,IAAI,mBACZE,OACD,SAACC,GAASR,QAAQC,KAAK,oBAAqBO,OAsCjDD,EAAU,WAERX,KACAC,OAAOC,QAAQC,QAAQU,aAAY,WAE/BZ,OAAOC,QAAQC,QAAQW,IAxElB,YAwEgC,WAjBrB,IAACC,IAvDZ,WAyDTf,KACAC,OAAOC,QAAQC,QAAQa,OAAOD,EAAS,+BAA+B,SAACE,GACnEX,MAAM,2BAA6BW,MACpC,SAACC,GACAZ,MAAM,mBAAqBY,SAaxB,WACCZ,MAAM,0DAGX,SAACY,GACAZ,MAAM,wBAA0Ba,KAAKC,UAAUF,QA6C5CG,MAxCf,WAGI,OACI,yBAAKxB,UAAU,YACX,yBAAKA,UAAU,UACX,wBAAIA,UAAU,aAAd,eACA,6BACA,uBAAGA,UAAU,aAAb,wFACyF,6BADzF,uEAMJ,yBAAKA,UAAU,yBACX,yBAAKA,UAAU,uBACX,0BAAMA,UAAU,mBAAmByB,GAAG,gBAAtC,oBAEJ,2BAAOC,KAAK,OAAOC,KAAK,kBACpBC,MAAO3B,EAAMC,gBACb2B,SAAU,SAAAlB,GAAC,OAlEPmB,EAkE0BnB,EAAEoB,OAAOH,MAjEvD3B,EAAMC,gBAAkB4B,EACxBvB,QAAQK,IAAI,mBAAqBX,EAAMC,sBACnCE,OAAOC,SAAWD,OAAOC,QAAQC,QACjCF,OAAOC,QAAQC,QAAQO,KA1Cd,WA0C6BZ,EAAMC,iBAAiB,WACzDK,QAAQK,IAAI,sBAIhBL,QAAQC,KAAK,uDACbC,MAAM,uBAVS,IAACqB,GAoEJE,SAAS,OACThC,UAAU,eAAeiC,YAAY,WAAWC,aAAW,WAAWC,mBAAiB,kBAM/F,yBAAKnC,UAAU,eACX,4BAAQyB,GAAG,QAAQC,KAAK,SAASU,QAAS1B,EAAkBV,UAAU,mBAAtE,uC,KCnGDqC,MAXf,WACE,OACE,yBAAKrC,UAAU,OACb,kBAAC,EAAD,MACA,yBAAKA,UAAU,cACb,kBAAC,EAAD,SCEYsC,QACW,cAA7BlC,OAAOmC,SAASC,UAEe,UAA7BpC,OAAOmC,SAASC,UAEhBpC,OAAOmC,SAASC,SAASC,MACvB,2D,UCZAC,EAAiB,WACrBC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,UAG/C1C,OAAO2C,QACTF,SAASG,iBAAiB,eAAe,WACvCvC,MAAM,SACNiC,OACC,GAEHA,IDmHI,kBAAmBO,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLjD,QAAQiD,MAAMA,EAAMC,c","file":"static/js/main.9a8362b1.chunk.js","sourcesContent":["import React from 'react';\nfunction Header(){\n    return (\n        <nav className=\"navbar navbar-dark bg-primary\">\n            <div className=\"row col-12 d-flex justify-content-center text-white\">\n                <span className=\"h3\">FaceID Auth</span>\n            </div>\n        </nav>\n    )\n}\nexport default Header;","import React, { useState } from 'react';\nconst KEY_NAME = \"KEY_NAME\";\nconst state = ({ currentKeyValue: \"SecretValue\" });\n/**\n    * Util function to check if touchid is defined\n    * If is not defined a console warn is sent\n    * If is defined, the callback is executed, sending touchid instance as parameter\n    * @param {*} successCallback \n    */\nconst touchIdPluginExists = () => {\n    if (window.plugins && window.plugins.touchid) {\n        return true;\n    }\n    else {\n        console.warn(\"touchid is not defined. Is this running on cordova?\");\n        alert('No touchid plugin');\n    }\n\n}\n/**\n * Called by UI when login button is clicked\n * @param {*} e \n */\nconst handleLoginClick = (e) => {\n    \n    console.log('currentKeyValue ' + state.currentKeyValue);\n    if (touchIdPluginExists()) {\n        window.plugins.touchid.save(KEY_NAME, state.currentKeyValue, function () {\n            console.log('calling onLogin');\n            onLogin();\n        }, (err) => {console.warn(\"save failed with \", err)})\n    }\n\n\n};\n/**\n * Called by UI when input changes\n * @param {*} newValue \n */\nconst onSecretChange = (newValue) => {\n    state.currentKeyValue = newValue;\n    console.log(\"onSecretChange: \" + state.currentKeyValue);\n    if (window.plugins && window.plugins.touchid) {\n        window.plugins.touchid.save(KEY_NAME, state.currentKeyValue, function () {\n            console.log(\"value updated.\");\n        })\n    }\n    else {\n        console.warn(\"touchid is not defined. Is this running on cordova?\");\n        alert('No touchid plugin');\n    }\n}\n/**\n * tries to get value for keyName in touchid\n * @param {*} keyName \n */\nconst retrieveFromTouchId = (keyName) => {\n\n    if (touchIdPluginExists()) {\n        window.plugins.touchid.verify(keyName, \"Use TouchID to get password\", (password) => {\n            alert(\"The stored password is: \" + password);\n        }, (errorMessage) => {\n            alert(\"TouchID Failed: \" + errorMessage);\n        })\n    };\n};\n\n// Login\nconst onLogin = () => {\n\n    if (touchIdPluginExists()) {\n        window.plugins.touchid.isAvailable(() => {\n            // verify that the key exists, as expected\n            window.plugins.touchid.has(KEY_NAME, function () {\n                retrieveFromTouchId(KEY_NAME);\n            }, function () {\n                alert(\"Touch ID available but no Password Key available\");\n            });\n\n        }, (errorMessage) => {\n            alert(\"isAvailable failed : \" + JSON.stringify(errorMessage));\n        })\n    };\n}\n\nfunction Login() {\n\n    \n    return (\n        <div className=\"row mt-3\">\n            <div className=\"col-12\">\n                <h2 className=\"text-left\">Description</h2>\n                <hr />\n                <p className=\"text-left\">\n                    Click on the button bellow to get the store password in key chain using the touchid. <br />\n                    The stored password can be changed near the \"Stored password\" text\n                </p>\n            </div>\n\n            <div className=\"input-group mt-2 mb-3\">\n                <div className=\"input-group-prepend\">\n                    <span className=\"input-group-text\" id=\"basic-addon1\">Stored password</span>\n                </div>\n                <input type=\"text\" name=\"currentKeyValue\"\n                    value={state.currentKeyValue}\n                    onChange={e => onSecretChange(e.target.value)\n                    }\n                    disabled=\"true\"\n                    className=\"form-control\" placeholder=\"Username\" aria-label=\"Username\" aria-describedby=\"basic-addon1\"\n                />\n            </div>\n\n\n\n            <div className=\"col-12 mt-5\">\n                <button id=\"login\" type=\"submit\" onClick={handleLoginClick} className=\"btn btn-primary\" >Get stored password with touchID</button>\n            </div>\n\n        </div>\n\n\n    )\n    \n}\n\nexport default Login;\n","import React from 'react';\nimport Header from './components/header/header'\nimport Login from './components/login/login'\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Header />\n      <div className=\" container\">\n        <Login/>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.css';\nconst renderReactDom = () => {\n  ReactDOM.render(<App />, document.getElementById('root'));\n};\n\nif (window.cordova) {\n  document.addEventListener('deviceready', () => {\n    alert('ready');\n    renderReactDom();\n  }, false);\n} else {\n  renderReactDom();\n}\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();"],"sourceRoot":""}